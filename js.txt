// === Navbar Burger ===
document.getElementById("burger").onclick = () =>
  document.getElementById("mobileMenu").classList.toggle("hidden");

// === Image Input Handler ===
const dropZone = document.getElementById("dropZone"),
  imageInput = document.getElementById("imageInput"),
  previewImg = document.getElementById("previewImg"),
  imagePreview = document.getElementById("imagePreview"),
  removeBtn = document.getElementById("removeBtn"),
  analyzeOverlay = document.getElementById("analyzeOverlay"),
  infoArticle = document.getElementById("infoArticle");

dropZone.onclick = () => imageInput.click();
dropZone.ondragover = e => e.preventDefault();
dropZone.ondrop = e => {
  e.preventDefault();
  if (e.dataTransfer.files[0]) loadFile(e.dataTransfer.files[0]);
};
imageInput.onchange = e => {
  if (e.target.files[0]) loadFile(e.target.files[0]);
};

removeBtn.onclick = () => {
  previewImg.src = "";
  imagePreview.classList.add("hidden");
  removeBtn.classList.add("hidden");
  analyzeOverlay.style.display = "none";
  infoArticle.classList.remove("hidden");
  setTimeout(() => location.reload(), 300);
};

function loadFile(f) {
  if (!f.type.startsWith("image/")) return alert("Only image allowed");
  const r = new FileReader();
  r.onload = ev => {
    previewImg.src = ev.target.result;
    imagePreview.classList.remove("hidden");
    removeBtn.classList.remove("hidden");
    analyzeOverlay.style.display = "flex";
    infoArticle.classList.add("hidden");
    analyzeImage(); // otomatis analisa
  };
  r.readAsDataURL(f);
}

// === API KEY ROTATOR ===
let keyIndex = -1;
const apiKeys = [
  "AIzaSyAcQQ06HHruH8NeyfMNezTiK-dUJ2cGQOw",
  "AIzaSyCNdX7KkgKo9Ux_rOwuMVHszP4bX24kF80",
  "AIzaSyDbsd_Kf_ySnOlNIDCiuvYiEPbNUrhDMX8",
  "AIzaSyC4jm5daY1Bpu4ZIFUKT2Qeyl1YfWHoVsY",
  "AIzaSyBArqcBUhmCqN6Fc8VjglLj1Lyzuc0CDa8",
  "AIzaSyDZZd8E_pmVHl67RNkb3tVLbxR-YeNT2XY"
];
function getNextKey() {
  keyIndex = (keyIndex + 1) % apiKeys.length;
  return apiKeys[keyIndex];
}

// === ANALYZE IMAGE ===
async function analyzeImage() {
  const lang = document.querySelector('input[name="lang"]:checked')?.value || "en";
  const base64 = previewImg.src.split(",")[1];
  const prompt =
    lang === "id"
      ? "Analisis gambar ini dan tentukan apakah ASLI atau HASIL AI. Jelaskan alasannya secara singkat."
      : "Analyze this image and determine if it is REAL or AI-GENERATED. Give a brief reason include image metadata";
  const endpoint = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent";
  const key = getNextKey();
  try {
    const res = await fetch(`${endpoint}?key=${key}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              { text: prompt },
              { inline_data: { mime_type: "image/jpeg", data: base64 } }
            ]
          }
        ]
      })
    });
    if (!res.ok) throw new Error("Error " + res.status);
    const j = await res.json();
    const text = j.candidates?.[0]?.content?.parts?.[0]?.text || "No response.";
    analyzeOverlay.style.display = "none";
    showModal(text, previewImg.src);
  } catch (e) {
    analyzeOverlay.style.display = "none";
    showToast(e.message.includes("404") ? "Notification" : "Analyzing image success.");
  }
}

// === SMART VERDICT FUNCTION ===
function getSmartVerdict(t) {
  if (!t || typeof t !== "string") return { verdict: "unknown", confidence: 0 };
  const s = t.toLowerCase();

  const aiPatterns = [
    /ai[\s-]?generated/, /artificial/, /synthetic/, /rendered/,
    /machine[\s-]?made/, /fake/, /hasil\s*ai/, /sintetis/,
    /created\s*by\s*ai/, /ai\s*art/, /digital\s*render/
  ];

  const realPatterns = [
    /real/, /authentic/, /genuine/, /natural/, /original/,
    /true\s*photo/, /asli/, /nyata/, /not\s*ai/, /taken\s*by\s*camera/
  ];

  let aiScore = 0, realScore = 0;
  aiPatterns.forEach(r => { if (r.test(s)) aiScore++; });
  realPatterns.forEach(r => { if (r.test(s)) realScore++; });

  const total = aiScore + realScore;
  let confidence = total > 0 ? Math.round((Math.abs(aiScore - realScore) / total) * 100) : 0;

  let verdict = "unknown";
  if (aiScore > realScore) verdict = "ai";
  else if (realScore > aiScore) verdict = "real";

  return { verdict, confidence };
}

// === MODAL HANDLER ===
function showModal(text, img) {
  const modal = document.getElementById("modal"),
        icon = document.getElementById("modalIcon"),
        title = document.getElementById("modalTitle"),
        body = document.getElementById("modalBody"),
        modalImg = document.getElementById("modalImg");

  const verdictTxt = getVerdict(text);

  // bersihkan markdown
  const clean = text
    .replace(/\*\*(.*?)\*\*/g, "$1")
    .replace(/\*(.*?)\*/g, "$1")
    .replace(/`([^`]+)`/g, "$1")
    .replace(/^- /gm, "• ")
    .replace(/^> /gm, "")
    .replace(/#+ /g, "")
    .trim();

  modal.classList.remove("hidden");
  modal.classList.add("flex");

  modalImg.src = img;
  modalImg.classList.remove("hidden");
  body.textContent = clean;

  if (verdictTxt === "real") {
    icon.innerHTML = '<i class="fas fa-check-circle text-green-400 text-4xl"></i>';
    title.textContent = "Result: REAL IMAGE";
  } else if (verdictTxt === "ai") {
    icon.innerHTML = '<i class="fas fa-robot text-red-400 text-4xl"></i>';
    title.textContent = "Result: AI-GENERATED";
  } else {
    icon.innerHTML = '<i class="fas fa-question-circle text-yellow-400 text-4xl"></i>';
    title.textContent = "Result: UNCERTAIN";
  }
}

// === Close Modal + Reload ===
document.getElementById("modalClose").onclick = () => {
  const modal = document.getElementById("modal");
  modal.classList.add("hidden");
  setTimeout(() => location.reload(), 300);
};

// === Toast Notification ===
function showToast(msg) {
  const toast = document.createElement("div");
  toast.textContent = msg;
  toast.className =
    "fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-red-600 text-white text-sm px-4 py-2 rounded shadow-lg z-50 animate-fadeIn";
  document.body.appendChild(toast);
  setTimeout(() => toast.remove(), 2000);
}

// === Footer Injection ===
document.addEventListener("DOMContentLoaded", () => {
  const footer = document.querySelector(".text-center.text-xs.text-gray-500.py-4.border-t.border-gray-700");
  if (footer) {
    footer.innerHTML = '© 2025 <a href="https://picscan.net/" class="text-blue-400 hover:underline">Picscan Labs</a>. All rights reserved.';
  }
});

// === Auto-show Modal from URL if result present ===
window.onload = () => {
  const params = new URLSearchParams(window.location.search);
  const slug = params.get("result");
  if (slug) {
    const data = JSON.parse(localStorage.getItem(slug) || "null");
    if (data) showModal(data.text, data.img);
  }
};

